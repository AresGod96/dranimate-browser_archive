/* it's dranimate.js ! */

var Dranimate = function () {

    /* debugging memory issue */
    /*
    console.error("NOTE: using da hack to make sure ARAP.js doesn't crash - takes longer than usual")
    var bigVerts = [1,251,1,298,17,415,19,289,21,200,21,248,24,309,26,220,26,377,27,336,31,182,34,426,36,100,36,148,36,402,41,124,41,351,43,296,45,166,47,39,48,376,53,69,54,411,55,139,55,312,56,96,59,332,61,356,64,27,70,397,70,429,73,9,75,319,85,412,93,383,104,400,114,428,169,424,185,409,190,371,199,389,200,18,210,371,210,412,220,21,230,415,237,32,243,12,248,424,249,48,269,44,269,422,276,399,288,51,289,421,292,378,301,403,306,363,307,58,308,428,311,385,321,403,324,349,327,61,329,375,339,394,346,48,347,69,348,412,349,370,359,390,366,358,367,73,376,376,382,58,390,427,394,385,400,408,402,54,416,420,421,64,424,401,431,378,435,46,436,417,441,66,444,397,451,376,457,200,460,73,461,133,463,171,464,113,464,235,466,288,470,265,471,375,473,149,475,190,477,210,480,393,481,315,484,84,484,132,484,235,486,293,490,270,491,368,494,199,496,219,500,308,501,114,502,385,504,72,505,334,509,277,512,242,513,90,513,192,516,212,516,296,518,317,518,372,521,109,522,129,523,259,528,335,80.55878186968839,24.61968838526912,137.36600306278714,13.965543644716693,163.89112050739956,31.55567300916138,211.81783159053384,33.937809576224545,112.12771635531834,50.725505146778495,409.2590815627142,66.89924605894448,80.88259958071279,65.63102725366876,259.0900170648464,69.69752559726962,220.5033222591362,69.22093023255815,364.3978102189781,73.92700729927007,193.7543496271748,75.57995028997514,302.97472924187724,77.52635379061371,318.47571606475714,85.88542963885429,65.79849726775956,96.81693989071039,135.6626582278481,104.94367088607595,423.46301633045147,93.6032660902978,463.42797202797203,86.43076923076923,136.6728778467909,106.2991718426501,106.82441977800202,102.59939455095862,237.0553097345133,100.33185840707965,344.11700182815355,101.04570383912248,494.0654135338346,112.57556390977443,365.81081081081084,82.92792792792793,380.92740740740743,127.78518518518518,403.3921747042766,123.6960873521383,234.49272237196766,111.9099730458221,179.99043715846994,125.74863387978142,290.3218187186301,126.31178033658105,445.84601691143746,141.0809968847352,97.38011695906432,140.8058479532164,61.03651115618661,144.631507775524,503.5636588380717,145.87762669962916,347.7264112072518,141.93778327152864,220.14334239130434,146.32608695652175,134.868438538206,160.68372093023257,405.7881355932203,170.62953995157386,400.53573033707863,173.80449438202248,57.46798266730862,184.58497833413577,187.61516034985422,176.27113702623907,187.45791399817017,178.74290942360477,247.20554035567716,179.9312585499316,304.13187748156554,186.41151446398186,145.38230240549828,183.72508591065292,238.7211055276382,194.29899497487438,353.5825753949258,197.0473910962183,451.40693858415375,202.0225035161744,116.22257300710339,205.14285714285714,313.7708333333333,186.5,421.7841328413284,217.19680196801968,51.12629852378349,222.3925642427556,250.39293849658316,222.87015945330296,493.64482900700455,232.8652657601978,87.18867924528301,229.52830188679246,190.96273291925465,228.92191659272405,161.65915492957745,228.9943661971831,177.52075310226786,241.71801454856654,363.81648258283775,226.2531860662702,120.27862289831866,248.32906325060048,73.89525569932225,254.1195317313617,249.0909645909646,244.11111111111111,394.0329052969502,252.71669341894062,400.4101941747573,239.40533980582524,298.99776286353466,237.36465324384787,324.6008557457213,257.42665036674816,434.2132442284326,262.6895504252734,220.72756071805702,267.62249208025344,271.5184478371501,268.30979643765903,324.36078157711097,255.24563852058617,378.34420955882354,277.87132352941177,29.78846153846154,277.3487614080834,123.80904723779024,277.3390712570056,448.17391304347825,294.7757210503659,314.0885137916838,309.7340469328942,161.9879618098796,307.57700290577003,189.8580034423408,313.23580034423406,102.08519108280255,317.15525477707007,195.79495798319329,319.6078431372549,255.09310986964618,294.584729981378,376.0755033557047,313.3948545861298,67.66543778801844,313.8811059907834,114.73452380952381,323.7136904761905,441.6495901639344,322.7950819672131,250.7168089490727,329.0091256991463,311.6929133858268,332.5472440944882,423.05445544554453,342.09694719471946,495.0326958667489,332.9796421961752,38.33357041251778,341.726173541963,364.9712936046512,354.71911337209303,489.5701342281879,355.42651006711407,192.56911509543087,362.4008097165992,132.22196620583716,371.505376344086,91.09867577958137,363.2964545066211,251.8986013986014,374.69274475524475,311.6834333179511,391.9483156437471,155.5379061371841,398.55354993983156,421.3285946385053,395.60641754671,154.06415620641562,401.46768944676893,247.65858389912705,402.18089233753636,19.482970671712394,397.2445600756859,141,74,422,328];
    var bigFaces = [31,128,47,37,36,48,79,75,84,114,215,122,119,116,125,115,120,125,114,122,126,125,120,126,124,125,126,215,107,122,120,110,121,116,106,125,109,178,116,117,111,123,118,108,119,107,112,122,110,114,121,111,103,158,110,212,114,178,106,116,148,111,117,102,148,117,113,102,117,212,215,114,104,106,178,106,105,115,101,212,110,148,103,111,104,95,106,96,100,107,102,92,148,104,178,109,99,104,109,101,215,212,101,208,215,92,103,148,94,105,106,86,84,100,143,92,102,95,94,106,215,96,107,93,95,104,208,96,215,208,87,96,89,143,102,92,90,103,94,101,105,94,198,101,198,208,101,83,85,89,88,172,93,88,93,99,208,211,87,91,88,98,93,191,95,155,91,97,90,155,97,191,198,94,191,94,95,172,88,91,172,175,93,143,142,92,175,191,93,155,90,92,142,155,92,162,172,91,89,85,143,85,142,143,155,162,91,211,82,87,142,151,155,162,175,172,191,195,198,195,227,198,227,208,198,128,41,47,175,188,191,80,142,85,227,211,208,151,162,155,82,222,86,222,81,86,162,163,175,195,205,227,187,195,191,81,79,84,211,76,82,188,187,191,78,80,83,80,132,142,76,222,82,78,132,80,73,76,211,71,73,211,77,79,81,163,183,175,214,71,211,132,149,142,149,151,142,227,205,211,205,214,211,183,188,175,76,77,222,151,150,162,171,183,163,77,75,79,149,150,151,150,163,162,74,72,132,72,149,132,78,74,132,150,159,163,159,171,163,183,187,188,73,70,76,183,195,187,149,147,150,194,190,183,183,190,195,199,205,195,147,159,150,62,214,205,190,199,195,66,67,136,66,136,72,71,69,73,199,62,205,199,210,62,159,174,171,136,149,72,136,67,149,214,69,71,67,147,149,62,69,214,171,194,183,189,194,171,174,189,171,139,147,67,64,65,69,147,154,159,154,174,159,62,64,69,63,139,67,65,61,68,139,154,147,154,168,174,54,51,59,168,189,174,193,199,190,138,139,63,58,138,63,62,57,64,57,60,64,138,154,139,194,189,190,189,193,190,210,57,62,220,56,61,154,167,168,57,55,60,193,204,199,209,210,199,204,209,199,177,189,168,60,55,220,209,57,210,134,154,138,209,55,57,53,138,58,209,219,55,167,177,168,53,134,138,134,146,154,186,193,189,177,186,189,167,170,177,52,51,54,160,167,154,152,160,154,146,152,154,219,52,55,50,134,53,224,51,52,219,224,52,49,134,50,224,48,51,192,204,193,186,192,193,209,42,219,49,135,134,135,146,134,203,209,204,192,203,204,224,45,48,203,42,209,42,224,219,180,186,177,42,45,224,170,180,177,46,135,49,180,192,186,160,170,167,201,203,192,130,135,46,160,165,170,165,166,170,44,46,47,203,216,42,166,180,170,137,152,146,135,137,146,44,130,46,153,160,152,137,153,152,38,37,43,130,137,135,180,182,192,182,201,192,153,165,160,182,200,201,41,129,130,129,137,130,216,39,42,166,181,180,144,153,137,200,216,203,201,200,203,128,129,41,226,144,137,39,38,40,169,181,166,153,161,165,221,38,39,200,217,216,129,226,137,197,200,182,217,39,216,161,169,165,181,182,180,217,221,39,169,166,165,223,37,38,221,223,38,207,217,200,181,184,182,184,197,182,144,161,153,141,144,226,169,173,181,223,36,37,131,226,129,128,131,129,197,207,200,173,184,181,217,223,221,156,161,144,217,35,223,35,36,223,145,156,144,161,173,169,202,207,197,207,218,217,145,141,226,131,145,226,156,173,161,141,145,144,127,131,128,31,127,128,173,179,184,34,35,217,218,34,217,133,145,131,156,164,173,184,185,197,185,202,197,185,206,202,202,218,207,179,185,184,164,179,173,206,32,202,32,218,202,33,30,36,127,133,131,157,164,156,140,156,145,133,140,145,32,26,218,140,157,156,23,157,140,26,27,218,17,206,185,164,176,179,127,28,133,27,29,218,218,29,34,18,164,157,27,20,29,28,19,133,176,185,179,17,24,206,21,140,133,15,23,140,196,17,185,31,28,127,25,15,140,206,26,32,176,5,185,5,196,185,24,26,206,22,11,30,20,14,22,12,15,25,4,176,164,10,4,164,13,18,157,4,7,176,18,10,164,7,5,176,15,13,23,17,6,24,14,11,22,8,225,14,2,11,14,196,3,17,3,6,17,213,9,16,225,2,14,5,0,196,0,3,196,3,1,6,0,1,3];
    ARAP.createNewARAPMesh(bigVerts, bigFaces);
    ARAP.addControlPoint(0, 226);
    ARAP.addControlPoint(0, 227);
    ARAP.setControlPointPosition(0, 226, 0, 0);
    ARAP.setControlPointPosition(0, 227, 100, 100);
    ARAP.updateMeshDeformation(0);
    ARAP.getDeformedVertices(0, bigVerts.length)*/

    var that = this;

    var container;

    var camera, scene, renderer, raycaster;
    var frustumSize = 1000;

    var mouse;

    var windowHalfX = window.innerWidth / 2;
    var windowHalfY = window.innerHeight / 2;

    var activeControlPoint = { hoveredOver: false, valid:false };

    var puppets = [];

    var controlPointToControl = 0;

    var THREEContainer;

/*****************************
    API
*****************************/

    this.setup = function (THREEContainerElem) {

        THREEContainer = THREEContainerElem;

        /* Initialize THREE canvas and scene */

        /*camera = new THREE.OrthographicCamera( 0, 
                                               window.innerWidth, 
                                               0, 
                                               window.innerHeight, 
                                               0.1, 1000 );
        camera.updateProjectionMatrix();*/

        var aspect = window.innerWidth / window.innerHeight;
        camera = new THREE.OrthographicCamera( frustumSize * aspect / - 2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, 1, 1000 );

        scene = new THREE.Scene();

        /*var geometry = new THREE.SphereGeometry( 500, 32, 32 );
        var material = new THREE.MeshBasicMaterial( {color: 0xffff00} );
        var sphere = new THREE.Mesh( geometry, material );
        scene.add( sphere );*/

        renderer = new THREE.WebGLRenderer( { antialias: true });
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.setClearColor( 0xFFFFFF, 1 );
        THREEContainer.appendChild( renderer.domElement );

        raycaster = new THREE.Raycaster();
        mouse = new THREE.Vector2();

        animate();

        // events

        THREEContainer.addEventListener( 'mousemove', function ( event ) {

            event.preventDefault();

            mouse.x =   ( event.clientX / window.innerWidth )  * 2 - 1;
            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

            // find intersections

            raycaster.setFromCamera( mouse, camera );

            var intersects = raycaster.intersectObjects( scene.children );

            console.log(intersects.length)

            if ( intersects.length > 0 ) {

                var foundControlPoint = false; 
                var facesIntersected = [intersects[0].face.a, intersects[0].face.b, intersects[0].face.c];
                var controlPoints = intersects[0].object.arapMesh.controlPoints;

                controlPoints.forEach(function (cp) {
                    facesIntersected.forEach(function(f) {
                        if(cp == f) {
                            foundControlPoint = true;
                            activeControlPoint = {
                                valid: true,
                                puppet: intersects[0].object.arapMesh, 
                                hoveredOver: true, 
                                beingDragged: false, 
                                controlPointIndex: cp
                            };
                        }
                    });
                });

                if(foundControlPoint) {
                    THREEContainer.style.cursor = "pointer";
                } else {
                    THREEContainer.style.cursor = "default";
                    activeControlPoint.hoveredOver = false;
                }
            }
        }, false );

        THREEContainer.addEventListener( 'mousedown', function( event ) {
            
            event.preventDefault();

            mouse.x =   ( event.clientX / window.innerWidth )  * 2 - 1;
            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

            if(activeControlPoint.hoveredOver) {
                activeControlPoint.beingDragged = true;
            }

        } , false );

        THREEContainer.addEventListener( 'mouseup', function( event ) {
            
            event.preventDefault();

            mouse.x =   ( event.clientX / window.innerWidth )  * 2 - 1;
            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

            if(activeControlPoint) {
                activeControlPoint.beingDragged = false;
                THREEContainer.style.cursor = "default";
            }

        });

    }

    this.setupMeshAndARAP = function (vertices, faces, controlPoints, canvas) {

        /*var bigOlString = "[";
        for (var i = 0; i < vertices.length; i++) {
            bigOlString += vertices[i] + ",";
        }
        bigOlString += "]\n["
        for (var i = 0; i < faces.length; i++) {
            bigOlString += faces[i] + ",";
        }
        bigOlString += "]\n["
        for (var i = 0; i < controlPoints.length; i++) {
            bigOlString += controlPoints[i] + ",";
        }
        bigOlString += "]"
        console.log(bigOlString)*/

        var wireframeMaterial = new THREE.MeshBasicMaterial({
            color: 0xFF0000,
            wireframe: true,
            wireframeLinewidth: 1
        });

        var canvasTexture = new THREE.Texture(canvas);
        canvasTexture.needsUpdate = true;
        var texturedMaterial = new THREE.MeshBasicMaterial({
            map: canvasTexture,
            transparent: true
        });

        /* Create the new ARAPThreeMesh */

        var arapThreeMesh = new ARAPThreeMesh(
            vertices, faces, controlPoints, texturedMaterial, canvas.width, canvas.height
        );
        scene.add(arapThreeMesh.threeMesh);
        puppets.push(arapThreeMesh);

    }

    this.loadDemoPuppet = function () {
        var verticesRaw = [122,128,123,58,126,93,133,145,134,112,140,47,147,160,158,56,164,171,168,191,178,59,180,207,184,228,195,48,197,244,203,380,209,260,214,55,218,394,219,368,220,277,224,297,227,317,228,70,230,337,238,398,243,84,257,99,257,390,266,372,270,115,274,338,282,315,285,291,290,116,292,272,310,116,312,270,330,119,332,267,348,128,351,259,368,128,370,252,388,127,390,246,408,125,410,243,428,98,428,122,430,237,440,82,450,234,458,73,464,249,472,58,473,267,487,285,492,60,510,69,513,380,516,312,522,398,524,84,530,327,531,103,531,370,532,143,536,123,536,347,540,162,546,384,555,177,559,266,562,237,562,372,562,396,564,286,565,195,565,215,569,306,582,322,582,394,585,342,588,367,141.67693744164333,77.19140989729225,168.71695680206318,75.21921341070278,219.3236889692586,70.75768535262206,202.2038043478261,87.63967391304348,502.0579588408232,87.48173036539269,242.82695810564664,109.68002428658167,459.7399804496579,99.86021505376344,155.4810996563574,120.35910652920963,193.41850594227503,131.47707979626486,482.4165834165834,130.96803196803197,488.5892255892256,119.27609427609427,243.6135573580533,149.143684820394,300.4357208448117,135.91827364554638,421.3807390817469,140.49104143337067,514.9465863453815,159.3273092369478,158.9445557782231,155.1008684034736,367.02764666217126,141.62171274443696,229.53015873015872,151.54285714285714,335.06445837063563,166.33213965980303,224.8281938325991,181.08076358296623,435.8752462245568,171.3854235062377,397.3939524838013,180.7291576673866,469.80273871206515,185.41968911917098,281.56273525721457,190.93914680050187,282.40738986262437,184.55660824253908,194.6196581196581,173.2863247863248,551.9451594851706,204.08617795187465,360.7615708274895,204.1505376344086,216.79143606175356,216.08476551121467,505.2034548944338,220.66170825335894,528.9249573621375,234.16145537237065,328.8119455943229,224.4943820224719,254.29624277456648,239.71242774566474,461.11803278688524,224.87081967213115,395.24917218543044,224.0687086092715,216.4972299168975,252.60387811634348,273.9637837837838,247.00756756756758,423.4761904761905,234.71995464852608,300.2370203160271,245.5665914221219,495.56418918918916,267.4493243243243,348.9391206313416,253.3957158962796,307.1780016792611,261.99580184718724,541.1273966766084,275.6310183212612,494.81693648816935,281.91407222914074,235.0554054054054,291.07905405405404,262.0140350877193,298.04350877192985,554.5039447731756,314.9526627218935,539.3471365638767,328.1400881057269,259.4751773049645,338.83806146572107,578.235446313066,345.391979301423,568.5553021664766,365.31128848346634,237.48012232415903,372.9750254841998,546.1214450422751,373.7847809377402,170,113,347,185,560,353];
        var vertices = [];
        for(var i = 0; i < verticesRaw.length; i+=2) {
            vertices.push([verticesRaw[i],verticesRaw[i+1]]);
        }
        var faces = [74,73,77,135,75,82,81,134,83,135,82,84,83,134,84,134,135,84,75,76,82,140,135,134,131,140,134,131,134,81,80,131,81,131,132,140,78,111,79,77,131,80,140,75,135,132,69,140,115,73,74,111,115,74,140,137,75,73,127,77,127,131,77,72,111,78,111,74,79,137,71,75,115,127,73,127,61,131,69,137,140,69,66,137,70,99,111,64,132,131,61,64,131,70,111,72,114,115,111,99,114,111,115,124,127,66,71,137,66,62,71,60,62,66,64,69,132,67,99,70,128,61,127,124,128,127,95,67,68,65,95,68,107,114,99,95,99,67,95,94,99,114,124,115,63,89,65,89,95,65,59,89,63,54,124,114,94,107,99,58,89,59,54,56,124,107,118,114,118,54,114,55,53,58,58,53,89,53,91,89,91,95,89,57,128,124,56,57,124,105,107,94,91,94,95,98,105,94,49,98,94,91,49,94,118,52,54,105,118,107,122,50,52,53,51,91,122,52,118,105,122,118,48,49,91,51,48,91,106,119,122,106,122,105,98,106,105,46,98,49,44,106,98,119,47,122,46,44,98,44,101,106,119,45,47,112,119,106,101,139,106,139,112,106,43,45,119,112,43,119,42,101,44,116,125,112,103,139,101,112,125,43,125,41,43,40,103,101,40,101,42,139,116,112,38,103,40,125,39,41,38,97,103,116,39,125,108,116,139,109,108,103,103,108,139,123,126,116,36,97,38,116,126,39,97,109,103,126,37,39,108,123,116,108,121,123,34,97,36,126,35,37,123,35,126,117,121,108,121,35,123,96,109,97,34,30,97,30,96,97,130,33,35,121,130,35,130,32,33,133,29,31,104,113,117,129,130,121,117,129,121,104,117,108,133,31,32,104,108,109,96,104,109,130,133,32,90,96,30,20,129,117,22,133,130,133,136,29,27,90,30,120,20,117,136,28,29,22,24,133,24,136,133,129,22,130,102,104,96,26,90,27,136,25,28,90,102,96,113,120,117,21,22,129,24,19,136,136,18,25,93,102,90,88,90,26,87,88,26,88,93,90,23,87,26,19,18,136,20,21,129,14,120,113,120,16,20,17,87,23,110,104,102,93,110,102,15,18,19,110,113,104,110,11,113,12,14,113,17,88,87,13,88,17,14,16,120,11,12,113,138,93,88,13,10,88,93,100,110,9,11,110,86,138,88,10,86,88,100,8,110,8,9,110,138,92,93,92,100,93,86,85,138,7,86,10,85,4,92,85,92,138,92,3,100,7,85,86,2,4,85,100,6,8,5,85,7,3,6,100,0,3,4,4,3,92,5,1,85];
        var controlPoints = [138,139,140];

        var image = new Image();
        image.onload = function() {
            var canvas = document.createElement('canvas');
            canvas.id = "dummyCanvas";
            canvas.width = image.width;
            canvas.height = image.height;
            var context = canvas.getContext('2d');
            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height)

            that.setupMeshAndARAP(vertices, faces, controlPoints, canvas);

            document.getElementById("meshGenerationWindow").style.visibility = "hidden";
            document.getElementById("newPuppetWindow").style.visibility = "visible";
        };
        image.src = 'testimages/shiba.jpg';
    };

    this.zoomIn = function () {

    }

    this.zoomIn = function () {
        
    }

    this.setPanEnabled = function (enabled) {
        
    }

/*****************************
    Dom events
*****************************/

    document.addEventListener('keydown', function(evt) {
    	if(evt.keyCode == 39) { // right arrow
    		controlPointToControl++;
    		if(controlPointToControl >= puppets[puppets.length-1].controlPoints.length) {
    			controlPointToControl = 0;
    		}
    	}
    	if(evt.keyCode == 37) { // left arrow
    		controlPointToControl--;
    		if(controlPointToControl < 0) {
    			controlPointToControl = puppets[puppets.length-1].controlPoints.length-1;
    		}
    	}
    });

    window.addEventListener( 'resize', function () {

    	var aspect = window.innerWidth / window.innerHeight;

        camera.left   = - frustumSize * aspect / 2;
        camera.right  =   frustumSize * aspect / 2;
        camera.top    =   frustumSize / 2;
        camera.bottom = - frustumSize / 2;

        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }, false );

/*****************************
    Draw/update loop
*****************************/

    function animate() {

    	requestAnimationFrame( animate );

    	update();
    	render();

    }

    function update() {

    	if(activeControlPoint.beingDragged) {
    		var p = activeControlPoint.puppet;
    		var ci = activeControlPoint.controlPointIndex;
    		p.setControlPointPosition(
                ci, 
                mouse.x * window.innerWidth, 
                mouse.y * -window.innerHeight);


            for(var i = 0; i < p.threeMesh.geometry.vertices.length; i++) {
                //console.log(p.threeMesh.geometry.vertices[i].z);
            }
    	}

    	for(var i = 0; i < puppets.length; i++) {
    		puppets[i].update();
    	}

    }

    function render() {

    	camera.position.x = 0;
        camera.position.y = 0;
        camera.position.z = -900;
        camera.lookAt( scene.position );
        camera.rotateOnAxis(new THREE.Vector3(0, 0, 1), 180 * Math.PI / 180);

        camera.updateMatrixWorld();

        renderer.render( scene, camera );

    }

};