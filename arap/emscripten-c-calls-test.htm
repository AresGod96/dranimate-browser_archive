<script src="arap-test.js"></script>

<script>

var setMeshVertexData = Module.cwrap(
  'setMeshVertexData', 'number', ['number', 'number']
);
var getMeshVertexData = Module.cwrap(
  'getMeshVertexData', 'number', ['number', 'number']
);

var setMeshTriangleData = Module.cwrap(
  'setMeshTriangleData', 'number', ['number', 'number']
);
var getMeshTriangleData = Module.cwrap(
  'getMeshTriangleData', 'number', ['number', 'number']
);

var resetMesh = Module.cwrap(
  'resetMesh', 'number', ['number', 'number']
);

var setupMeshDeformer = Module.cwrap(
	'setupMeshDeformer','[number]'
);

var addControlPoint = Module.cwrap(
	'addControlPoint','[number]'
);
var setControlPointPosition = Module.cwrap(
	'addControlPoint','[number]', ['number', 'number', 'number']
);

/* Small helper functions that handles all the nasty memory stuff for you. */
function doArrayFunction(arr, func) {
	// Create data
	var data = new Float32Array(arr);

	// Get data byte size, allocate memory on Emscripten heap, and get pointer
	var nDataBytes = data.length * data.BYTES_PER_ELEMENT;
	var dataPtr = Module._malloc(nDataBytes);

	// Copy data to Emscripten heap (directly accessed from Module.HEAPU8)
	var dataHeap = new Uint8Array(Module.HEAPU8.buffer, dataPtr, nDataBytes);
	dataHeap.set(new Uint8Array(data.buffer));

	// Call function and get result
	func(dataHeap.byteOffset, data.length);
	var result = new Float32Array(dataHeap.buffer, dataHeap.byteOffset, data.length);

	// Free memory
	Module._free(dataHeap.byteOffset);

	return result;
}

/* Actual code to put in the three demo */

// clear mesh data
resetMesh();

// add vertices
doArrayFunction([1, 2, 3, 4, 5, 6, 7, 8, 9], setMeshVertexData);
var verts = doArrayFunction([0, 0, 0, 0, 0, 0, 0, 0, 0], getMeshVertexData).slice(); // slice() copies an array
console.log(verts);

// add faces
doArrayFunction([0, 1, 2, 3, 4, 5, 6, 7, 8], setMeshTriangleData);
var tris = doArrayFunction([0, 0, 0, 0, 0, 0, 0, 0, 0], getMeshTriangleData).slice(); // slice() copies an array
console.log(tris);

// setup mesh deformer
setupMeshDeformer();

// add control point
addControlPoint(0);

// move that control point
setControlPointPosition(0, 0, 0);

</script>